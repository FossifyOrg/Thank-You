<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>EmptyFunctionBlock:MyContentProviderHelper.kt$MyContentProviderHelper${}</ID>
    <ID>FunctionNaming:MainActivity.kt$MainActivity$@Composable private fun AppLaunched( donateAlertDialogState: AlertDialogState = getDonateAlertDialogState(), rateStarsAlertDialogState: AlertDialogState = getRateStarsAlertDialogState(), )</ID>
    <ID>FunctionNaming:MainActivity.kt$MainActivity$@Composable private fun CheckWhatsNew( releasesList: SnapshotStateList&lt;Release&gt;, checkWhatsNewAlertDialogState: AlertDialogState )</ID>
    <ID>FunctionNaming:MainScreen.kt$@Composable @MyDevices private fun MainScreenPreview()</ID>
    <ID>FunctionNaming:MainScreen.kt$@Composable internal fun MainScreen( showMoreApps: Boolean, openSettings: () -&gt; Unit, openAbout: () -&gt; Unit, moreAppsFromUs: () -&gt; Unit, linkColor: Color, )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable @MyDevices private fun SettingsScreenPreview()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable internal fun SettingsScreen( displayLanguage: String, isUseEnglishEnabled: Boolean, isUseEnglishChecked: Boolean, isHidingLauncherIcon: Boolean, isShowingCheckmarksOnSwitches: Boolean, onUseEnglishPress: (Boolean) -&gt; Unit, onSetupLanguagePress: () -&gt; Unit, hideLauncherIconClick: (Boolean) -&gt; Unit, showCheckmarksOnSwitches: (Boolean) -&gt; Unit, customizeColors: () -&gt; Unit, goBack: () -&gt; Unit, )</ID>
    <ID>LongParameterList:Context.kt$( appNameId: Int, licenseMask: Long, versionName: String, faqItems: ArrayList&lt;FAQItem&gt;, showFAQBeforeMail: Boolean, getAppIconIDs: ArrayList&lt;Int&gt; = getAppIconIDs(), getAppLauncherName: String = launcherName() )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( displayLanguage: String, isUseEnglishEnabled: Boolean, isUseEnglishChecked: Boolean, isHidingLauncherIcon: Boolean, isShowingCheckmarksOnSwitches: Boolean, onUseEnglishPress: (Boolean) -&gt; Unit, onSetupLanguagePress: () -&gt; Unit, hideLauncherIconClick: (Boolean) -&gt; Unit, showCheckmarksOnSwitches: (Boolean) -&gt; Unit, customizeColors: () -&gt; Unit, goBack: () -&gt; Unit, )</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$private</ID>
    <ID>MaxLineLength:MainScreen.kt$ActionItem(R.string.settings, icon = Icons.Filled.Settings, doAction = openSettings, overflowMode = OverflowMode.NEVER_OVERFLOW)</ID>
    <ID>MaxLineLength:MainScreen.kt$ActionMenu(items = actionMenus, numIcons = 2, isMenuVisible = isMenuVisible, onMenuToggle = { isMenuVisible = it }, iconsColor = scrolledColor)</ID>
    <ID>MaxLineLength:MainScreen.kt$MainScreen(showMoreApps = true, openSettings = {}, openAbout = {}, moreAppsFromUs = {}, linkColor = SimpleTheme.colorScheme.onSurface)</ID>
    <ID>MaxLineLength:MainScreen.kt$SimpleScaffold</ID>
    <ID>MaxLineLength:MainScreen.kt$listOf(settings, about, ActionItem(R.string.more_apps_from_us, doAction = moreAppsFromUs, overflowMode = OverflowMode.ALWAYS_OVERFLOW))</ID>
    <ID>MaxLineLength:MainScreen.kt$val about = ActionItem(R.string.about, icon = Icons.Outlined.Info, doAction = openAbout, overflowMode = OverflowMode.NEVER_OVERFLOW)</ID>
    <ID>MaxLineLength:MyContentProvider.kt$MyContentProvider$override</ID>
    <ID>MaxLineLength:MyContentProviderHelper.kt$MyContentProviderHelper$class</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$val hideLauncherIconFlow by preferences.hideLauncherIconFlow.collectAsStateWithLifecycle(preferences.hideLauncherIcon)</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$val showCheckmarksOnSwitches by preferences.showCheckmarksOnSwitchesFlow.collectAsStateWithLifecycle(preferences.showCheckmarksOnSwitches)</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$val wasUseEnglishToggledFlow by preferences.wasUseEnglishToggledFlow.collectAsStateWithLifecycle(preferences.wasUseEnglishToggled)</ID>
    <ID>SwallowedException:Context.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Context.kt$e: Exception</ID>
    <ID>UnusedPrivateMember:MainScreen.kt$@Composable @MyDevices private fun MainScreenPreview()</ID>
    <ID>UnusedPrivateMember:SettingsScreen.kt$@Composable @MyDevices private fun SettingsScreenPreview()</ID>
    <ID>WildcardImport:Context.kt$import org.fossify.commons.helpers.*</ID>
    <ID>WildcardImport:MainActivity.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:MainActivity.kt$import org.fossify.commons.compose.extensions.*</ID>
    <ID>WildcardImport:MainScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SettingsScreen.kt$import org.fossify.commons.compose.settings.*</ID>
  </CurrentIssues>
</SmellBaseline>
